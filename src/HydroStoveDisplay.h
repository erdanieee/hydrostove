#ifndef HYDROSTOVE_DISPLAY_H
#define HYDROSTOVE_DISPLAY_H

// Compatibility with the Arduino 1.0 library standard
#if defined(ARDUINO) && ARDUINO >= 100
#include "Arduino.h"
#else
#include "WProgram.h"
#endif


#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>     //see https://github.com/adafruit/Adafruit-GFX-Library
#include <Adafruit_SSD1306.h> //see https://github.com/adafruit/Adafruit_SSD1306

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif


#define CALOR_ESPECIF_AGUA  418    // J/K·kg

const unsigned char PROGMEM test[] = {
  B10000000, B0000010,
  B01000000, B0000001,
  B00100000, B0000010,
  B00011110, B0111100,
  B00001000, B0001000,
  B00000100, B0010000,
  B00000010, B0100000,
  B00000001, B1000000,
  B10000000, B0000010,
  B01000000, B0000001,
  B00100000, B0000010,
  B00011110, B0111100,
  B00001000, B0001000,
  B00000100, B0010000,
  B00000010, B0100000,
  B00000001, B1000000
};

//Iconos creados con gimp (bmp 1 bit color) y transformados con lcdasistant orientación horizontal (http://en.radzio.dxp.pl/bitmap_converter/)
#define WARNING_SMALL_ICON_SIZE   16
const unsigned char PROGMEM warningSmallIcon [] = {
  0x01, 0x80, 0x03, 0xC0, 0x03, 0xC0, 0x06, 0x60, 0x06, 0x60, 0x0C, 0x30, 0x0D, 0xB0, 0x19, 0x98,
  0x19, 0x98, 0x31, 0x8C, 0x30, 0x0C, 0x61, 0x86, 0x61, 0x86, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF
};

//Iconos creados con gimp (bmp 1 bit color) y transformados con lcdasistant orientación horizontal (http://en.radzio.dxp.pl/bitmap_converter/)
#define WARNING_BIG_ICON_SIZE   48
const unsigned char PROGMEM warningBigIcon [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x83, 0x81, 0x83, 0x0F, 0x3F, 0xFF, 0xFF, 0xFE, 0xF8,
0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0xFF, 0xFF,
0xFF, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x03, 0x0F, 0x3F,
0xFF, 0xFF, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x03,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xC0, 0xF0, 0xFC, 0xFF, 0xFF, 0xFF, 0x3F, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0xEF, 0xEF, 0xEF, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x00,
0x70, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF9, 0xFB, 0xFB, 0xFB, 0xF9, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,
0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x78
};


class HydroStoveDisplay {
  public:
    HydroStoveDisplay ();

    //añade un nuevo valor al buffer. No repinta
    unsigned int add(unsigned int tempIn, unsigned int tempOut, unsigned long flowRate);
    void refreshDisplay();
    void setWarning(bool w);
    bool getWarning();
    void showBigWarning();


  private:
    Adafruit_SSD1306 _display;
    unsigned int _bufferIndex = 0;
    unsigned int _buffer[SSD1306_LCDWIDTH];
    unsigned int _currentTempIn, _currentTempOut, _currentFlowRate;
    unsigned int _scale = 1;
    unsigned int _maxValue = 0;
    bool _warning = false;

};

#endif  // HYDROSTOVE_DISPLAY_H
